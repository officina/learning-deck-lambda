# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mygenerali # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  endpointType: ${opt:endpointType, 'private'}
  name: aws
  memorySize: 512
  region: eu-central-1
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'mygenerali-dev'}
  environment:
     accountid: '123820204514'
     #questo serve per far prendere a invoke local il profile
     #AWS_PROFILE: mygenerali-dev
     PROJECT_NAME: mygenerali-lambda
     PLAYOFF_HOSTNAME: 'playoff.cc'
     PLAYOFF_CLIENT_ID: 'M2EzOWU4ZjUtM2Q5Yi00ZmE0LTkxNjYtOWM3MmFkMGNjNTIx'
     PLAYOFF_CLIENT_SECRET: 'MDc2ZGE1YjgtM2FjYS00MGYwLTg2YTQtYjY0OWVjNTViNzJjYzg3ZTVlNzAtNTM4OS0xMWU4LTlmMzctMjE2MGI4MDQ1OGMx'
     DYNAMODB_TOKEN_TABLE: playoff_token-${opt:stage, self:provider.stage}
     DYNAMODB_TOKEN_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_TOKEN_TABLE}"
     DYNAMODB_USERS_INFO_TABLE: users_info-${opt:stage, self:provider.stage}
     DYNAMODB_USERS_INFO_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_USERS_INFO_TABLE}"
     DYNAMODB_IP_AUTH_TABLE: mygenerali-ipauth-${opt:stage, self:provider.stage}
     DYNAMODB_IP_AUTH_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_USERS_INFO_TABLE}"
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: "${self:provider.environment.DYNAMODB_USERS_INFO_TABLE_ARN}"
package:
  exclude:
    - node_modules/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
  include:
    - gamecontroller/**

functions:
  authorizerUser:
    handler: handler_stub.auth

  play_action:
    handler: handler_stub.play_action
    events:
      - http:
          path: api/play/{player}
          method: put
          cors: true
          authorizer: ${file(config/configs-${opt:stage, self:provider.stage}.yml):globalAuthorizer}
  get_user_status:
    handler: handler_stub.user_status_action
    events:
      - http:
          path: api/userstatus/{player}
          method: get
          cors: true
          authorizer: ${file(config/configs-${opt:stage, self:provider.stage}.yml):globalAuthorizer}
  level_upgrade:
    handler: handler_stub.level_upgrade
    events:
      - http:
          path: api/levelupgrade/{player}
          method: put
          cors: true
          authorizer: ${file(config/configs-${opt:stage, self:provider.stage}.yml):globalAuthorizer}
resources:
  Resources:
    ${file(config/configs-${opt:stage, self:provider.stage}.yml):additionalResources}
custom:
  authorizer:
    users:
      name: authorizerUser
      type: request
      identitySource: method.request.header.X-Forwarded-For
      resultTtlInSeconds: ${opt:resultTtlInSeconds, '0'}

plugins:
  - serverless-python-requirements

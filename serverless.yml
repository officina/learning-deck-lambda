# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mygenerali # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  endpointType: ${opt:endpointType, 'private'}
  name: aws
  memorySize: 512
  region: eu-central-1
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'mygenerali-dev'}
  environment:
     accountid: '123820204514'
     #questo serve per far prendere a invoke local il profile
     #AWS_PROFILE: mygenerali-dev
     PROJECT_NAME: mygenerali-lambda
     PLAYOFF_HOSTNAME: 'playoff.cc'
     PLAYOFF_CLIENT_ID: 'M2EzOWU4ZjUtM2Q5Yi00ZmE0LTkxNjYtOWM3MmFkMGNjNTIx'
     PLAYOFF_CLIENT_SECRET: 'MDc2ZGE1YjgtM2FjYS00MGYwLTg2YTQtYjY0OWVjNTViNzJjYzg3ZTVlNzAtNTM4OS0xMWU4LTlmMzctMjE2MGI4MDQ1OGMx'
     DYNAMODB_TOKEN_TABLE: playoff_token-${opt:stage, self:provider.stage}
     DYNAMODB_TOKEN_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_TOKEN_TABLE}"
     DYNAMODB_USERS_INFO_TABLE: users_info-${opt:stage, self:provider.stage}
     DYNAMODB_USERS_INFO_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_USERS_INFO_TABLE}"
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: "${self:provider.environment.DYNAMODB_USERS_INFO_TABLE_ARN}"
plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
  include:
    - gamecontroller/**

functions:
#  play_action_without_stored_token_retrieval:
#    handler: handler.play_action_without_stored_token_retrieval
#    events:
#      - http:
#          path: test/withouttoken
#          method: get
#          cors: true

  play_action:
    handler: handler_stub.play_action
    events:
      - http:
          path: api/play/{player}
          method: put
          cors: true

  get_user_status:
    handler: handler_stub.user_status_action
    events:
      - http:
          path: api/userstatus/{player}
          method: get
          cors: true

  level_upgrade:
    handler: handler_stub.level_upgrade
    events:
      - http:
          path: api/levelupgrade/{player}
          method: put
          cors: true

  get_lazy_users:
    handler: handler_stub.get_lazy_users
    events:
      - http:
          path: api/lazyusers/{from}
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    tokenTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TOKEN_TABLE}
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    usersInfoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_USERS_INFO_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${opt:project_name}-learning-deck # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  memorySize: 512
  region: ${opt:region, 'eu-west-1'}
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'leroy-merlin-dev'}
  environment:
     accountid: 'officina'
     PROJECT_NAME: leroy-merlin-lambda
     PLAYOFF_HOSTNAME: ${opt:playoff_hostname, 'playoffgamification.io'}

     DYNAMODB_TOKEN_TABLE: ${opt:project_name}_ld_playoff_token-${opt:stage, self:provider.stage}
     DYNAMODB_TOKEN_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_TOKEN_TABLE}"

     DYNAMODB_USERS_INFO_TABLE: ${opt:project_name}_ld_users_info-${opt:stage, self:provider.stage}
     DYNAMODB_USERS_INFO_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_USERS_INFO_TABLE}"

     DYNAMODB_USERS_READY_INFO_TABLE: ${opt:project_name}_ld_users_info_ready-${opt:stage, self:provider.stage}
     DYNAMODB_USERS_READY_INFO_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_USERS_READY_INFO_TABLE}"

     DYNAMODB_IP_AUTH_TABLE: ${opt:project_name}_ld_ipauth-${opt:stage, self:provider.stage}
     DYNAMODB_IP_AUTH_TABLE_ARN: "arn:aws:dynamodb:${opt:region, self:provider.region}:${self:provider.environment.accountid}:table/${self:provider.environment.DYNAMODB_IP_AUTH_TABLE}"

     PLAYOFF_CLIENT_ID_READY: "${self:custom.secrets.PLAYOFF_CLIENT_ID_READY}"
     PLAYOFF_CLIENT_SECRET_READY: "${self:custom.secrets.PLAYOFF_CLIENT_SECRET_READY}"
     PLAYOFF_CLIENT_ID_PUBLISHED: "${self:custom.secrets.PLAYOFF_CLIENT_ID_PUBLISHED}"
     PLAYOFF_CLIENT_SECRET_PUBLISHED: "${self:custom.secrets.PLAYOFF_CLIENT_SECRET_PUBLISHED}"

     PLAYOFF_PROFILE_CACHE_DURATION_IN_MINUTES: '720'
     PLAYOFF_RANKING_CACHE_DURATION_IN_MINUTES: '720'

  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USERS_INFO_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USERS_READY_INFO_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TOKEN_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_IP_AUTH_TABLE}"
  stackTags:
    project: "learningdeck"
    ld_project: "${opt:project_name}"
package:
  exclude:
    - 'node_modules/**'
    - 'README.md'
    - 'package.json'
    - 'package-lock.json'
    - '.eggs/**'
    - '.idea/**'
    - '.tests/**'
    - 'testNick.py'
    - 'schemas/**'
    - 'scripts/**'
  include:
    - 'gamecontroller/**'

functions:
  authorizerUser:
    handler: handler_stub.auth

  play_action:
    handler: handler_stub.play_action
    timeout: 10
    events:
      - http:
          path: ${opt:project_name}/play/{player}
          method: put
          cors: true
          authorizer: ${file(config/configs-${opt:stage, self:provider.stage}.yml):globalAuthorizer}
  get_user_status:
    handler: handler_stub.user_status_action
    timeout: 10
    events:
      - http:
          path: ${opt:project_name}/userstatus/{player}
          method: get
          cors: true
          authorizer: ${file(config/configs-${opt:stage, self:provider.stage}.yml):globalAuthorizer}
  level_upgrade:
    handler: handler_stub.level_upgrade
    timeout: 10
    events:
      - http:
          path: ${opt:project_name}/levelupgrade/{player}
          method: put
          cors: true
  get_lazy_users:
    handler: handler_stub.get_lazy_users
    timeout: 10
    events:
      - http:
          path: ${opt:project_name}/lazyusers/{from}
          method: get
          cors: true
          authorizer: ${file(config/configs-${opt:stage, self:provider.stage}.yml):globalAuthorizer}
#  reset_players:
#    handler: handler_stub.reset_players
#    timeout: 300
#    events:
#      - schedule:
#          rate: cron(0 9,13 ? * MON-FRI *)
#      - schedule:
#          rate: cron(0 15 ? * MON-THU *)
resources:
  Resources:
    ${file(config/configs-${opt:stage, self:provider.stage}.yml):additionalResources}
custom:
  capacities:
    ${file(config/configs-${opt:stage, self:provider.stage}.yml):customCapacities}
  authorizer:
    users:
      name: authorizerUser
      type: request
      identitySource: method.request.header.X-Forwarded-For
      resultTtlInSeconds: ${opt:resultTtlInSeconds, '0'}
  prune:
    automatic: true
    number: 3
  secrets: ${file(secrets_lrm.yml):${opt:stage, self:provider.stage}}

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-dynamodb-autoscaling
  - serverless-plugin-resource-tagging
